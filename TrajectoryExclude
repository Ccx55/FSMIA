function KeepExcludeTraj = TrajectoryExclude(allTraj, Frame)

% This function sorts out the trajectories that include molecules appearing
% in the first or last frame from the ones that do not. This outputs a
% struct array with both the kept and the excluded trajectories at .Keep
% and .Exclude. 
% Input
%   - ALLTRAJ = the global RESULT.TRAJECTORY file or the NEWTRAJ file
%   (Result.Trajectory.trajectory form)
%   - FRAME = the global FRAME file
% Output
%   - KeepExcludeTraj.Keep = Trajectories that do not have molecules
%   appearing in the first or last frame
%   - KeepExcludeTraj.Exclude = Trajectories that have molecules appearing
%   in the first or last frame (KeepExlcudeTraj.Exclude.trajectory form)

% Get the molecular indices of molecules in the first and last frame
firstMolecules = Frame(1).MoleculeIndex;
lastMolecules = Frame(end).MoleculeIndex;

% Find the trajectories that start with these molecules or end with them
% and do not include them in KeepTraj
KeepTraj = cell(length(allTraj));
ExcludeTraj = KeepTraj; % problem
% KeepInd = zeros(1,length(allTraj.Trajectory));
% ExcludeInd = zeros(1,length(allTraj.Trajectory));
for i = 1:length(allTraj)
    if sum(allTraj(i).trajectory(1) == firstMolecules) == 1 || sum(allTraj(i).trajectory(end) == lastMolecules) == 1
        % Store the excluded trajectory if the first moleculular index in
        % the trajectory is any of the molecules in the first frame, or if
        % the last is any of the molecules in the last frame
        ExcludeTraj{i} = allTraj(i).trajectory;
    elseif sum(allTraj(i).trajectory(1) == firstMolecules) > 1 || sum(allTraj(i).trajectory(end) == lastMolecules) > 1
        % If more than one of the molecular indices match with the
        % molecules in the first or last frame - that's bad.
        disp([num2str(i),' is a broken trajectory']);
    else
        KeepTraj{i} = allTraj(i).trajectory;
    end
end

% Consolidate the results
ExclusionIndices = 1:length(ExcludeTraj); % Create an array of increasing indices
KeptIndices = 1:length(KeepTraj);
ExclusionIndices = ExclusionIndices(~cellfun('isempty',ExcludeTraj)); % Keep only the 1-valued indices (only the not empty trajectories)
KeptIndices = KeptIndices(~cellfun('isempty',KeepTraj)); 
KeepTrajectories = struct([]); % Create the struct arrays in the form KeepTrajectories(i).trajectory = the full trajectory of molecular indices
ExcludeTrajectories = struct([]);
for i = 1:length(KeptIndices)
    j = KeptIndices(i); % Select the next non-empty trajectory
    KeepTrajectories(i).trajectory = KeepTraj{j};
end
for i = 1:length(ExclusionIndices)
    j = ExclusionIndices(i);
    ExcludeTrajectories(i).trajectory = ExcludeTraj{j};
end

KeepExcludeTraj.Keep = KeepTrajectories;
KeepExcludeTraj.Exclude = ExcludeTrajectories;
end

